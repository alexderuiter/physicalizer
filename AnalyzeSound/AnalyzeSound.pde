/**
  * This sketch demonstrates how to use an FFT to analyze
  * the audio being generated by an AudioPlayer.
  * <p>
  * FFT stands for Fast Fourier Transform, which is a 
  * method of analyzing audio that allows you to visualize 
  * the frequency content of a signal. You've seen 
  * visualizations like this before in music players 
  * and car stereos.
  * <p>
  * For more information about Minim and additional features, 
  * visit http://code.compartmental.net/minim/
  */

import ddf.minim.analysis.*;
import ddf.minim.*;

Minim minim;
FFT fft;
AudioInput in;
int w;

void setup()
{
  // define the dimension of the display window width and height in units of pixels
  size(640, 480, P3D);

  minim = new Minim(this);
  
  // specify that we want the audio buffers of the AudioInput
  // to be 512 samples long because our FFT needs to have 
  // a power-of-two buffer size and this is a good size.
  
  in = minim.getLineIn(Minim.STEREO, 512);
  
  // create an FFT object that has a time-domain buffer 
  // the same size as in's sample buffer
  // note that this needs to be a power of two 
  // and that it means the size of the spectrum will be half as large.
  fft = new FFT( in.bufferSize(), in.sampleRate() );
  
  // averaging the fft on a logaritmic scale
  // void logAverages(int minBandwidth, int bandsPerOctave)
  // minBandwidth - minimum bandwidth used for an octave, in Hertz
  // bandsPerOctave - how many bands to split each octave into
  // when: fft.logAverages(960,1): there will by 5 bars displayed
  fft.logAverages(11,1);
  
  // define strokeWeight
  // avgSize returns the number of averages currently being calculated
  w = width/fft.avgSize();
  //println(fft.avgSize());
  strokeWeight(w);
  strokeCap(SQUARE);
}

void draw()
{
  background(0);
  stroke(255);
  
  // perform a forward FFT on the samples in in's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward(in.mix);
  
  for(int i = 0; i < fft.avgSize(); i++)
  {
    // draw the line for frequency band i, scaling it up a bit so we can see it
    line((i * w) + (w / 2), height, (i * w) + (w / 2), (height - 30) - fft.getAvg(i) * 200 );
  }
}